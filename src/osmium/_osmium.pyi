# SPDX-License-Identifier: BSD-2-Clause
#
# This file is part of pyosmium. (https://osmcode.org/pyosmium/)
#
# Copyright (C) 2024 Sarah Hoffmann <lonvia@denofr.de> and others.
# For a full list of authors see the git log.
from typing import ByteString, Union, Optional, Any
import os

from .osm import osm_entity_bits
from .osm.types import OSMEntity
from .index import LocationTable, IdSet
from .io import Reader, Writer, Header

StrPath = Union[str, 'os.PathLike[str]']

# Placeholder for more narrow type defintion to come
HandlerLike = object

class InvalidLocationError(Exception): ...


class BaseHandler: ...


class BaseFilter(BaseHandler):
    def enable_for(self, entities: osm_entity_bits) -> None: ...


class BufferIterator:
    def __init__(self, *handlers: HandlerLike) -> None: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> 'BufferIterator': ...
    def __next__(self) -> OSMEntity: ...


class MergeInputReader:
    def __init__(self) -> None: ...
    def _apply_internal(self, *handlers: HandlerLike, simplify: bool = ...) -> None: ...
    def add_buffer(self, buffer: Union[ByteString, str], format: str) -> int: ...
    def add_file(self, file: str) -> int: ...
    def apply_to_reader(self, reader: Reader, writer: Writer, with_history: bool = ...) -> None: ...
    def apply(self, *handlers: Any, idx: str = '', simplify: bool = True) -> None: ...



class SimpleWriter:
    def __init__(self, filename: str, bufsz: int= ...,
                 header: Optional[Header]= ..., overwrite: bool= ...,
                 filetype: str= ...) -> None: ...
    def add_node(self, node: object) -> None: ...
    def add_relation(self, relation: object) -> None: ...
    def add_way(self, way: object) -> None: ...
    def add(self, obj: object) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> 'SimpleWriter':...
    def __exit__(self, *args: Any) -> None:...


class NodeLocationsForWays:
    apply_nodes_to_ways: bool
    def __init__(self, locations: LocationTable) -> None: ...
    def ignore_errors(self) -> None: ...


class OsmFileIterator:
    def __init__(self, reader: Reader, *handlers: HandlerLike) -> None: ...
    def set_filtered_handler(self, handler: object) -> None: ...
    def __iter__(self) -> 'OsmFileIterator': ...
    def __next__(self) -> OSMEntity: ...


class IdTrackerIdFilter(BaseFilter): ...


class IdTrackerContainsFilter(BaseFilter): ...


class IdTracker:
    def __init__(self) -> None: ...
    def add_node(self, node: int) -> None: ...
    def add_relation(self, relation: int) -> None: ...
    def add_way(self, way: int) -> None: ...
    def add_references(self, obj: object) -> None: ...
    def contains_any_references(self, obj: object) -> bool: ...
    def complete_backward_references(self, filename: str, relation_depth: int = ...) -> None: ...
    def complete_forward_references(self, filename: str, relation_depth: int = ...) -> None: ...
    def id_filter(self) -> IdTrackerIdFilter: ...
    def contains_filter(self) -> IdTrackerContainsFilter: ...
    def node_ids(self) -> IdSet: ...
    def way_ids(self) -> IdSet: ...
    def relation_ids(self) -> IdSet: ...

def apply(reader: Union[Reader | str], *handlers: HandlerLike) -> None: ...
